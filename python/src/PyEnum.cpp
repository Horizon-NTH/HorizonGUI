#include "../include/Include.h"

void init_enum(const py::module& hgui)
{
	py::enum_<hgui::keys>(hgui, "keys",
				"The keys enumeration defines constants for keyboard keys and their corresponding keycodes.")
			.value("UNKNOWN", hgui::keys::UNKNOWN)
			.value("ESCAPE", hgui::keys::ESCAPE)
			.value("F1", hgui::keys::F1)
			.value("F2", hgui::keys::F2)
			.value("F3", hgui::keys::F3)
			.value("F4", hgui::keys::F4)
			.value("F5", hgui::keys::F5)
			.value("F6", hgui::keys::F6)
			.value("F7", hgui::keys::F7)
			.value("F8", hgui::keys::F8)
			.value("F9", hgui::keys::F9)
			.value("F10", hgui::keys::F10)
			.value("F11", hgui::keys::F11)
			.value("F12", hgui::keys::F12)
			.value("PRINT_SCREEN", hgui::keys::PRINT_SCREEN)
			.value("INSERT", hgui::keys::INSERT)
			.value("BACKSPACE", hgui::keys::BACKSPACE)
			.value("SQUARE", hgui::keys::SQUARE)
			.value("AMPERSAND", hgui::keys::AMPERSAND)
			.value("E_WITH_ACUTE", hgui::keys::E_WITH_ACUTE)
			.value("QUOTATION", hgui::keys::QUOTATION)
			.value("APOSTROPHE", hgui::keys::APOSTROPHE)
			.value("LEFT_BRACKET", hgui::keys::LEFT_BRACKET)
			.value("MINUS", hgui::keys::MINUS)
			.value("E_WITH_GRAVE", hgui::keys::E_WITH_GRAVE)
			.value("UNDERSCORE", hgui::keys::UNDERSCORE)
			.value("C_WITH_CEDILLA", hgui::keys::C_WITH_CEDILLA)
			.value("A_WITH_GRAVE", hgui::keys::A_WITH_GRAVE)
			.value("RIGHT_BRACKET", hgui::keys::RIGHT_BRACKET)
			.value("EQUAL", hgui::keys::EQUAL)
			.value("REMOVE", hgui::keys::REMOVE)
			.value("TAB", hgui::keys::TAB)
			.value("A", hgui::keys::A)
			.value("Z", hgui::keys::Z)
			.value("E", hgui::keys::E)
			.value("R", hgui::keys::R)
			.value("T", hgui::keys::T)
			.value("Y", hgui::keys::Y)
			.value("U", hgui::keys::U)
			.value("I", hgui::keys::I)
			.value("O", hgui::keys::O)
			.value("P", hgui::keys::P)
			.value("CIRCUMFLEX", hgui::keys::CIRCUMFLEX)
			.value("DOLLAR", hgui::keys::DOLLAR)
			.value("ASTERISK", hgui::keys::ASTERISK)
			.value("CAPS_LOCK", hgui::keys::CAPS_LOCK)
			.value("Q", hgui::keys::Q)
			.value("S", hgui::keys::S)
			.value("D", hgui::keys::D)
			.value("F", hgui::keys::F)
			.value("G", hgui::keys::G)
			.value("H", hgui::keys::H)
			.value("J", hgui::keys::J)
			.value("K", hgui::keys::K)
			.value("L", hgui::keys::L)
			.value("M", hgui::keys::M)
			.value("U_WITH_GRAVE", hgui::keys::U_WITH_GRAVE)
			.value("ENTER", hgui::keys::ENTER)
			.value("LEFT_SHIFT", hgui::keys::LEFT_SHIFT)
			.value("SIGN", hgui::keys::SIGN)
			.value("W", hgui::keys::W)
			.value("X", hgui::keys::X)
			.value("C", hgui::keys::C)
			.value("V", hgui::keys::V)
			.value("B", hgui::keys::B)
			.value("N", hgui::keys::N)
			.value("COMMA", hgui::keys::COMMA)
			.value("SEMICOLON", hgui::keys::SEMICOLON)
			.value("COLON", hgui::keys::COLON)
			.value("EXCLAMATION_MARK", hgui::keys::EXCLAMATION_MARK)
			.value("RIGHT_SHIFT", hgui::keys::RIGHT_SHIFT)
			.value("LEFT_CONTROL", hgui::keys::LEFT_CONTROL)
			.value("WINDOWS", hgui::keys::WINDOWS)
			.value("LEFT_ALT", hgui::keys::LEFT_ALT)
			.value("SPACE", hgui::keys::SPACE)
			.value("RIGHT_ALT", hgui::keys::RIGHT_ALT)
			.value("RIGHT_CONTROL", hgui::keys::RIGHT_CONTROL)
			.value("RIGHT", hgui::keys::RIGHT)
			.value("LEFT", hgui::keys::LEFT)
			.value("DOWN", hgui::keys::DOWN)
			.value("UP", hgui::keys::UP)
			.value("PAGE_UP", hgui::keys::PAGE_UP)
			.value("PAGE_DOWN", hgui::keys::PAGE_DOWN)
			.value("HOME", hgui::keys::HOME)
			.value("END", hgui::keys::END)
			.value("PAUSE", hgui::keys::PAUSE)
			.value("SCROLL_LOCK", hgui::keys::SCROLL_LOCK)
			.value("NUM_LOCK", hgui::keys::NUM_LOCK)
			.value("KP_0", hgui::keys::KP_0)
			.value("KP_1", hgui::keys::KP_1)
			.value("KP_2", hgui::keys::KP_2)
			.value("KP_3", hgui::keys::KP_3)
			.value("KP_4", hgui::keys::KP_4)
			.value("KP_5", hgui::keys::KP_5)
			.value("KP_6", hgui::keys::KP_6)
			.value("KP_7", hgui::keys::KP_7)
			.value("KP_8", hgui::keys::KP_8)
			.value("KP_9", hgui::keys::KP_9)
			.value("KP_DECIMAL", hgui::keys::KP_DECIMAL)
			.value("KP_DIVIDE", hgui::keys::KP_DIVIDE)
			.value("KP_MULTIPLY", hgui::keys::KP_MULTIPLY)
			.value("KP_SUBTRACT", hgui::keys::KP_SUBTRACT)
			.value("KP_ADD", hgui::keys::KP_ADD)
			.value("KP_ENTER", hgui::keys::KP_ENTER)
			.value("KP_EQUAL", hgui::keys::KP_EQUAL);

	py::enum_<hgui::buttons>(hgui, "buttons",
				"The buttons enumeration defines constants for mouse buttons.")
			.value("LEFT", hgui::buttons::LEFT)
			.value("RIGHT", hgui::buttons::RIGHT)
			.value("MIDDLE", hgui::buttons::MIDDLE)
			.value("BUTTON_3", hgui::buttons::BUTTON_3)
			.value("BUTTON_4", hgui::buttons::BUTTON_4)
			.value("BUTTON_5", hgui::buttons::BUTTON_5)
			.value("BUTTON_6", hgui::buttons::BUTTON_6)
			.value("BUTTON_7", hgui::buttons::BUTTON_7)
			.value("BUTTON_8", hgui::buttons::BUTTON_8);

	py::enum_<hgui::inputs>(hgui, "inputs",
				"The inputs enumeration defines constants for various input events.")
			.value("OVER", hgui::inputs::OVER)
			.value("NOVER", hgui::inputs::NOVER)
			.value("MOTION", hgui::inputs::MOTION)
			.value("SCROLL", hgui::inputs::SCROLL)
			.value("SCROLL_UP", hgui::inputs::SCROLL_UP)
			.value("SCROLL_DOWN", hgui::inputs::SCROLL_DOWN);

	py::enum_<hgui::actions>(hgui, "actions",
				"The actions enumeration defines constants for input actions, such as press, repeat, and release.")
			.value("PRESS", hgui::actions::PRESS)
			.value("REPEAT", hgui::actions::REPEAT)
			.value("RELEASE", hgui::actions::RELEASE);

	py::enum_<hgui::effects>(hgui, "effects",
				"The effects enumeration defines constants for visual effects.")
			.value("CLASSIC", hgui::effects::CLASSIC)
			.value("BLURRED", hgui::effects::BLURRED)
			.value("NEGATIVE", hgui::effects::NEGATIVE);

	py::enum_<hgui::options>(hgui, "options",
				"The options enumeration defines constants for window options.")
			.value("RESIZABLE", hgui::options::RESIZABLE)
			.value("VISIBLE", hgui::options::VISIBLE)
			.value("DECORATED", hgui::options::DECORATED)
			.value("FOCUSED", hgui::options::FOCUSED)
			.value("AUTO_ICONIFY", hgui::options::AUTO_ICONIFY)
			.value("FLOATING", hgui::options::FLOATING)
			.value("MAXIMIZED", hgui::options::MAXIMIZED)
			.value("CENTER_CURSOR", hgui::options::CENTER_CURSOR)
			.value("FOCUS_ON_SHOW", hgui::options::FOCUS_ON_SHOW)
			.value("SCALE_TO_MONITOR", hgui::options::SCALE_TO_MONITOR);

	py::enum_<hgui::channels>(hgui, "channels",
				"The channels enumeration defines constants for color channels.")
			.value("GREYSCALE", hgui::channels::GREYSCALE)
			.value("GREYSCALE_ALPHA", hgui::channels::GREYSCALE_ALPHA)
			.value("RGB", hgui::channels::RGB)
			.value("RGBA", hgui::channels::RGBA)
			.value("UNKNOW", hgui::channels::UNKNOW);

	py::enum_<hgui::state>(hgui, "state",
				"The state enumeration defines constants for the state of GUI elements.")
			.value("NORMAL", hgui::state::NORMAL)
			.value("HOVER", hgui::state::HOVER)
			.value("PRESS", hgui::state::PRESS);

	py::enum_<hgui::cursors>(hgui, "cursors",
				"The cursors enumeration defines constants for cursor types.")
			.value("ARROW", hgui::cursors::ARROW)
			.value("IBEAM", hgui::cursors::IBEAM)
			.value("CROSSHAIR", hgui::cursors::CROSSHAIR)
			.value("HAND", hgui::cursors::HAND)
			.value("HRESIZE", hgui::cursors::HRESIZE)
			.value("VRESIZE", hgui::cursors::VRESIZE);

	py::enum_<hgui::reference>(hgui, "reference",
				"The reference enumeration is used to define which metrics the application's responsiveness should be relative to.")
			.value("WIDTH", hgui::reference::WIDTH)
			.value("HEIGHT", hgui::reference::HEIGHT)
			.value("BOTH", hgui::reference::BOTH);
}
